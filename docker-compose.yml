# RepoChat v1.0 Development Environment
# Docker Compose configuration for complete multi-service setup
# Run with: docker compose up -d

services:
  # Neo4j Database for Code Knowledge Graph
  neo4j:
    image: neo4j:5.15-community
    container_name: repochat-neo4j
    ports:
      - "7474:7474"  # Browser interface
      - "7687:7687"  # Bolt protocol
    environment:
      - NEO4J_AUTH=neo4j/repochat123
      - NEO4J_PLUGINS=["apoc"]
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*
      - NEO4J_apoc_import_file_enabled=true
      - NEO4J_apoc_export_file_enabled=true
      - NEO4J_dbms_memory_heap_initial__size=512m
      - NEO4J_dbms_memory_heap_max__size=2g
      - NEO4J_dbms_connector_bolt_listen__address=0.0.0.0:7687
      - NEO4J_dbms_connector_http_listen__address=0.0.0.0:7474
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_plugins:/plugins
      - neo4j_import:/var/lib/neo4j/import
    networks:
      - repochat-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "cypher-shell -u neo4j -p repochat123 'RETURN 1' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Backend Python Application
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: repochat-backend
    ports:
      - "8000:8000"  # FastAPI server
      - "5678:5678"  # Debug port for VS Code
    environment:
      - PYTHONPATH=/app/src
      - PYTHONUNBUFFERED=1
      - ENVIRONMENT=development
      - DEBUG=true
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USERNAME=neo4j
      - NEO4J_PASSWORD=repochat123
      - NEO4J_DATABASE=neo4j
      - LOG_LEVEL=DEBUG
      - LOG_FILE_PATH=/app/logs/repochat.log
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY:-}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
      - OLLAMA_BASE_URL=${OLLAMA_BASE_URL:-http://host.docker.internal:11434}
      - CORS_ORIGINS=["http://localhost:3000", "http://frontend:3000"]
      - MAX_WORKERS=4
      - WORKER_TIMEOUT=300
    volumes:
      # Mount source code for hot reloading
      - ./backend:/app
      # Mount logs directory
      - ./logs:/app/logs
      # Mount temp directory for git clones
      - ./temp:/app/temp
      # Cache pip dependencies
      - backend_pip_cache:/root/.cache/pip
    networks:
      - repochat-network
    depends_on:
      neo4j:
        condition: service_healthy
    restart: unless-stopped
    stdin_open: true
    tty: true
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 45s

  # Frontend Vue.js Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    container_name: repochat-frontend
    ports:
      - "3000:3000"  # Development server
      - "5173:5173"  # Vite dev server
    environment:
      - NODE_ENV=development
      - VITE_API_BASE_URL=http://localhost:8000
      - VITE_APP_TITLE=RepoChat v1.0
      - VITE_ENVIRONMENT=development
      - CHOKIDAR_USEPOLLING=true  # For file watching in Docker
      - WATCHPACK_POLLING=true    # For webpack file watching
      - HOST=0.0.0.0
      - PORT=3000
    volumes:
      - ./frontend:/app
      - frontend_node_modules:/app/node_modules
      # Exclude node_modules from sync to avoid issues
      - /app/node_modules
    networks:
      - repochat-network
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s

  # Redis Cache (Optional, for future caching needs)
  redis:
    image: redis:7-alpine
    container_name: repochat-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - repochat-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: redis-server --appendonly yes

# Named volumes for persistent data
volumes:
  neo4j_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/neo4j
  neo4j_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./logs/neo4j
  neo4j_plugins:
    driver: local
  neo4j_import:
    driver: local
  backend_pip_cache:
    driver: local
  frontend_node_modules:
    driver: local
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/redis

# Custom network for service communication
networks:
  repochat-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 