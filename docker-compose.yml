version: '3.8'

services:
  # Neo4j Database for Code Knowledge Graph
  neo4j:
    image: neo4j:5.15-community
    container_name: repochat-neo4j
    ports:
      - "7474:7474"  # Browser interface
      - "7687:7687"  # Bolt protocol
    environment:
      - NEO4J_AUTH=neo4j/repochat123
      - NEO4J_PLUGINS=["apoc"]
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*
      - NEO4J_apoc_import_file_enabled=true
      - NEO4J_apoc_export_file_enabled=true
      - NEO4J_dbms_shell_enabled=true
      - NEO4J_dbms_memory_heap_initial__size=512m
      - NEO4J_dbms_memory_heap_max__size=2g
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_plugins:/plugins
      - neo4j_import:/var/lib/neo4j/import
    networks:
      - repochat-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "cypher-shell -u neo4j -p repochat123 'RETURN 1'"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Backend Python Application
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: repochat-backend
    ports:
      - "8000:8000"  # FastAPI server
      - "5678:5678"  # Debug port for VS Code
    environment:
      - PYTHONPATH=/app/src
      - PYTHONUNBUFFERED=1
      - ENVIRONMENT=development
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USERNAME=neo4j
      - NEO4J_PASSWORD=repochat123
      - LOG_LEVEL=DEBUG
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
    volumes:
      # Mount source code for hot reloading
      - ./backend:/app
      # Mount logs directory
      - ./logs:/app/logs
      # Mount temp directory for git clones
      - ./temp:/app/temp
      # Cache pip dependencies
      - backend_pip_cache:/root/.cache/pip
    networks:
      - repochat-network
    depends_on:
      neo4j:
        condition: service_healthy
    restart: unless-stopped
    stdin_open: true
    tty: true
    healthcheck:
      test: ["CMD-SHELL", "python -c 'from src.orchestrator.orchestrator_agent import OrchestratorAgent; print(\"Backend healthy\")'"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  # Frontend Vue.js Application (for future phases)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    container_name: repochat-frontend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - VITE_API_BASE_URL=http://localhost:8000
    volumes:
      - ./frontend:/app
      - frontend_node_modules:/app/node_modules
    networks:
      - repochat-network
    depends_on:
      - backend
    restart: unless-stopped
    profiles:
      - frontend  # Only start when frontend profile is active

# Named volumes for persistent data
volumes:
  neo4j_data:
    driver: local
  neo4j_logs:
    driver: local
  neo4j_plugins:
    driver: local
  neo4j_import:
    driver: local
  backend_pip_cache:
    driver: local
  frontend_node_modules:
    driver: local

# Custom network for service communication
networks:
  repochat-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 